networks:
  custom_network:
    driver: bridge

services:
  backend:
    image: task-manager-app:latest
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 20s
      timeout: 60s
      retries: 5
    networks:
      - custom_network

## Comments are provided throughout this file to help you get started.
## If you need more help, visit the Docker Compose reference guide at
## https://docs.docker.com/go/compose-spec-reference/
#
## Here the instructions define your application as a service called "server".
## This service is built from the Dockerfile in the current directory.
## You can add other services your application may depend on here, such as a
## database or a cache. For examples, see the Awesome Compose repository:
## https://github.com/docker/awesome-compose
#services:
#  server:
#    build:
#      context: .
#    ports:
#      - 8081:8081
#    environment:
#        - SPRING_PROFILES_ACTIVE=dev
##        - SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/task-manager-db
#        - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/task-manager-db
#        - SPRING_DATASOURCE_USERNAME=dustin
#        - SPRING_DATASOURCE_PASSWORD_FILE=/run/secrets/spring-datasource-password
#        - SPRING_JPA_HIBERNATE_DDL_AUTO=update
##        - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.PostgreSQLDialect
##      - SPRING_PROFILES_ACTIVE=dev
##      - SPRING_DATASOURCE_URL=jdbc:mysql://host.docker.internal:3306/dev_database
##      - SPRING_DATASOURCE_USERNAME=dev_user
##      - SPRING_DATASOURCE_PASSWORD=dev_password
##      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
##      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL5Dialect
#    user: dustin
#    secrets:
#      - spring-datasource-password
#    depends_on:
#      db:
#        condition: service_healthy
#  db:
#    image: postgres:13
#    restart: always
#    environment:
#      - POSTGRES_DB=task-manager-db
#      - POSTGRES_USER=dustin
#      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#    ports:
#      - 5432:5432
#    secrets:
#      - db-password
#    volumes:
#      - postgres_data:/var/lib/postgresql/data
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready -U dustin -d task-manager-db"]
#      interval: 10s
#      timeout: 10s
#      retries: 5
#secrets:
#  db-password:
#    file: db/password.txt
#  spring-datasource-password:
#    file: db/spring-datasource-password.txt
#volumes:
#  postgres_data:
#
#
## The commented out section below is an example of how to define a PostgreSQL
## database that your application can use. `depends_on` tells Docker Compose to
## start the database before your application. The `db-data` volume persists the
## database data between container restarts. The `db-password` secret is used
## to set the database password. You must create `db/password.txt` and add
## a password of your choosing to it before running `docker-compose up`.
##     depends_on:
##       db:
##         condition: service_healthy
##   db:
##     image: postgres
##     restart: always
##     user: postgres
##     secrets:
##       - db-password
##     volumes:
##       - db-data:/var/lib/postgresql/data
##     environment:
##       - POSTGRES_DB=example
##       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
##     expose:
##       - 5432
##     healthcheck:
##       test: [ "CMD", "pg_isready" ]
##       interval: 10s
##       timeout: 5s
##       retries: 5
## volumes:
##   db-data:
## secrets:
##   db-password:
##     file: db/password.txt
#
#
#
